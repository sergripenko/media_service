swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /api/v1
paths:
  /images/:
    get:
      tags:
      - images
      description: get Images
      operationId: ImagesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Images'
        "403":
          description: ""
    post:
      tags:
      - images
      description: create Images
      operationId: ImagesController.Post
      parameters:
      - in: body
        name: body
        description: body for Images content
        required: true
        schema:
          $ref: '#/definitions/api.ImageData'
      responses:
        "201":
          description: '{int} api.CreatedImageData'
        "403":
          description: body is empty
  /images/{id}:
    get:
      tags:
      - images
      description: get Images by id
      operationId: ImagesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Images'
        "403":
          description: :id is empty
    put:
      tags:
      - images
      description: update the Images
      operationId: ImagesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Images content
        required: true
        schema:
          $ref: '#/definitions/models.Images'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Images'
        "403":
          description: :id is not int
    delete:
      tags:
      - images
      description: delete the Images
      operationId: ImagesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /users/:
    get:
      tags:
      - users
      description: get Users
      operationId: UsersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: ""
    post:
      tags:
      - users
      description: create Users
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "201":
          description: '{int} models.Users'
        "403":
          description: body is empty
  /users/{id}:
    get:
      tags:
      - users
      description: get Users by id
      operationId: UsersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is empty
    put:
      tags:
      - users
      description: update the Users
      operationId: UsersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is not int
    delete:
      tags:
      - users
      description: delete the Users
      operationId: UsersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  api.ImageData:
    title: ImageData
    type: object
    properties:
      file:
        type: array
        items:
          type: string
          format: byte
      filename:
        type: string
      height:
        type: integer
        format: int64
      user_id:
        type: integer
        format: int64
      width:
        type: integer
        format: int64
  models.Base:
    title: Base
    type: object
    properties:
      created_at:
        type: string
        format: datetime
      deleted_at:
        type: string
        format: datetime
      updated_at:
        type: string
        format: datetime
  models.Images:
    title: Images
    type: object
    properties:
      created_at:
        type: string
        format: datetime
      deleted_at:
        type: string
        format: datetime
      filename:
        type: string
      height:
        type: integer
        format: int64
      id:
        type: integer
        format: int64
      orig_img_id:
        type: integer
        format: int64
      uniq_id:
        type: string
      updated_at:
        type: string
        format: datetime
      url:
        type: string
      user:
        $ref: '#/definitions/models.Users'
      width:
        type: integer
        format: int64
  models.Users:
    title: Users
    type: object
    properties:
      created_at:
        type: string
        format: datetime
      deleted_at:
        type: string
        format: datetime
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
        format: int64
      last_name:
        type: string
      updated_at:
        type: string
        format: datetime
tags:
- name: users
  description: |
    UsersController operations for Users
- name: images
  description: |
    ImagesController operations for Images
